{"version":3,"sources":["Header/GuestInputForm.js","Header/index.js","MainContent/ConfirmedFilter.js","MainContent/GuestList/GuestName.js","MainContent/GuestList/Guest.js","MainContent/GuestList/PendingGuest.js","MainContent/GuestList/index.js","MainContent/Counter.js","MainContent/index.js","App.js","serviceWorker.js","index.js"],"names":["GuestInputForm","props","react_default","a","createElement","onSubmit","newGuestSubmitHandler","type","onChange","handleNameInput","value","pendingGuest","placeholder","name","Header","Header_GuestInputForm","ConfirmedFilter","toggleFilter","checked","isFiltered","GuestName","isEditing","children","handleNameEdits","Guest","GuestList_GuestName","e","setName","target","isConfirmed","handleConfirmation","onClick","handleToggleEditing","handleRemove","PendingGuest","className","GuestList","GuestList_PendingGuest","guests","filter","guest","map","index","GuestList_Guest","key","toggleConfirmation","id","toggleEditing","text","removeGuest","Counter","numberAttending","numberUnconfirmed","totalInvited","MainContent","MainContent_ConfirmedFilter","MainContent_Counter","MainContent_GuestList","App","state","lastGuestId","newGuestId","_this","toggleGuestProperty","property","setState","Object","objectSpread","defineProperty","preventDefault","concat","toConsumableArray","getTotalInvited","length","getAttendingGeuests","reduce","total","this","src_Header","src_MainContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5ce602c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GuestInputForm = props =>\n<form onSubmit={props.newGuestSubmitHandler}>\n<input \n    type='text'\n    onChange={props.handleNameInput}\n    value={props.pendingGuest}\n    placeholder=\"Invite Someone\"\n/>\n<button type='submit' name='submit' value='submit'>Submit</button>\n</form>;\n\nGuestInputForm.propTypes = {\n    newGuestSubmitHandler: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired,\n    handleNameInput: PropTypes.func.isRequired\n};\n\nexport default GuestInputForm;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestInputForm from './GuestInputForm';\n\nconst Header = props =>\n    <header>\n    <h1>RSVP</h1>\n    <p>A Treehouse App</p>\n    <GuestInputForm \n        newGuestSubmitHandler={props.newGuestSubmitHandler}\n        pendingGuest={props.pendingGuest}\n        handleNameInput={props.handleNameInput} />\n        </header>;\n\n    Header.propTypes = {\n        newGuestSubmitHandler: PropTypes.func.isRequired,\n        pendingGuest: PropTypes.string.isRequired,\n        handleNameInput: PropTypes.func.isRequired\n    };\n\n    export default Header;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ConfirmedFilter = props =>\n<div>\n<h2>Invitees</h2>\n<label>\n  <input \n  type=\"checkbox\"\n  onChange={props.toggleFilter}\n  checked={props.isFiltered} \n\n  />{\" \"}\n   Hide those who haven't responded \n</label>\n</div>;\n\nConfirmedFilter.propTypes = {\n    toggleFilter: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired\n};\n\nexport default ConfirmedFilter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst GuestName = props => {\n    if (props.isEditing) {\n        return (\n            <input \n            type=\"text\" \n            value={props.children} \n            onChange={props.handleNameEdits} />\n        );\n    }\n\n    return (\n        <span>{props.children}</span>\n    );\n};\n\nGuestName.propTypes = {\n    isEditing: PropTypes.bool.isRequired,\n    handleNameEdits: PropTypes.func.isRequired\n};\n\nexport default GuestName;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport GuestName from './GuestName';\n\nconst Guest = props => \n        <li>\n        <GuestName \n        isEditing={props.isEditing}\n        handleNameEdits={e => props.setName(e.target.value)}>\n        {props.name}\n        </GuestName>\n        <label>\n        <input \n          type=\"checkbox\"\n          checked={props.isConfirmed}\n          onChange={props.handleConfirmation} /> Confirmed \n        </label>\n        <button onClick={props.handleToggleEditing}>\n          {props.isEditing ? \"save\" : \"edit\"}\n        </button>\n        <button onClick={props.handleRemove}>remove</button>\n        </li>;\n\nGuest.propTypes = {\n    name: PropTypes.string.isRequired,\n    isConfirmed: PropTypes.bool.isRequired,\n    isEditing: PropTypes.bool.isRequired,\n    handleConfirmation: PropTypes.func.isRequired,\n    handleToggleEditing: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired\n};\n\nexport default Guest;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PendingGuest = props => {  \n      if (props.name) {\n        return(\n        <li className=\"pending\">\n        <span>\n        {props.name}\n        </span>\n        </li>\n        );\n        }\n        return null;\n    };\n\nPendingGuest.propTypes = {\n    name: PropTypes.string.isRequired,\n};\n\nexport default PendingGuest;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Guest from './Guest';\nimport PendingGuest from './PendingGuest';\n\nconst GuestList = props => \n    <ul>\n    <PendingGuest name={props.pendingGuest} />\n         {props.guests\n         .filter(guest => !props.isFiltered || guest.isConfirmed)\n         .map((guest, index) =>\n            <Guest \n            key={index} \n            name={guest.name} \n            isConfirmed={guest.isConfirmed}\n            isEditing={guest.isEditing}\n            handleConfirmation={() => props.toggleConfirmation(guest.id)}\n            handleToggleEditing={() => props.toggleEditing(guest.id)} \n            setName={text => props.setName(text, guest.id)}\n            handleRemove={() => props.removeGuest(guest.id)} />\n        )}\n    </ul>;\n\nGuestList.propTypes = {\n    guests: PropTypes.array.isRequired,\n    toggleConfirmation: PropTypes.func.isRequired,\n    toggleEditing: PropTypes.func.isRequired,\n    setName: PropTypes.func.isRequired,\n    isFiltered: PropTypes.bool.isRequired,\n    removeGuest: PropTypes.func.isRequired,\n    pendingGuest: PropTypes.string.isRequired\n};\n\nexport default GuestList;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Counter = props => \n    <table className=\"counter\">\n          <tbody>\n            <tr>\n              <td>Attending:</td>\n              <td>{props.numberAttending}</td>\n            </tr>\n            <tr>\n              <td>Unconfirmed:</td>\n              <td>{props.numberUnconfirmed}</td>\n            </tr>\n            <tr>\n              <td>Total:</td>\n              <td>{props.totalInvited}</td>\n            </tr>\n          </tbody>\n        </table>;\n    \n    Counter.propTypes = {\n        numberAttending: PropTypes.number,\n        numberUnconfirmed: PropTypes.number,\n        totalInvited: PropTypes.number\n    };\n\n\nexport default Counter;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ConfirmedFilter from './ConfirmedFilter';\nimport GuestList from './GuestList';\nimport Counter from './Counter';\n\nconst MainContent = props => \n    <div className='main'>\n        <ConfirmedFilter \n            toggleFilter={props.toggleFilter}\n            isFiltered={props.isFiltered}\n        />\n        <Counter \n            totalInvited={props.totalInvited}\n            numberAttending={props.numberAttending}\n            numberUnconfirmed={props.numberUnconfirmed}\n        />\n        <GuestList \n            guests={props.guests}\n            toggleConfirmation={props.toggleConfirmation}\n            toggleEditing={props.toggleEditing}\n            setName={props.setName}\n            isFiltered={props.isFiltered}\n            removeGuest={props.removeGuest}\n            pendingGuest={props.pendingGuest}\n        />\n    </div>;\n\n    MainContent.propTypes = {\n        toggleFilter: PropTypes.func.isRequired,\n        isFiltered: PropTypes.bool.isRequired,\n        totalInvited: PropTypes.number.isRequired,\n        numberAttending: PropTypes.number.isRequired,\n        numberUnconfirmed: PropTypes.number.isRequired,\n        guests: PropTypes.array.isRequired,\n        toggleConfirmation: PropTypes.func.isRequired,\n        toggleEditing: PropTypes.func.isRequired,\n        setName: PropTypes.func.isRequired,\n        removeGuest: PropTypes.func.isRequired,\n        pendingGuest: PropTypes.string.isRequired\n    };\n\n    export default MainContent;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Header from \"./Header\";\nimport MainContent from \"./MainContent\";\n\nclass App extends Component {\n  state = {\n    isFiltered: false,\n    pendingGuest: \"\",\n    guests: []\n  };\n\n  lastGuestId = 0;\n\n  newGuestId = () => {\n    const id = this.lastGuestId;\n    this.lastGuestId += 1;\n    return id;\n  };\n\n  toggleGuestProperty = (property, id) =>\n    this.setState({\n      guests: this.state.guests.map(guest => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            [property]: !guest[property]\n          };\n        }\n        return guest;\n      })\n    });\n\n  toggleConfirmation = id => \n    this.toggleGuestProperty(\"isConfirmed\", id);\n\n  removeGuest = id =>\n    this.setState({\n      guests: this.state.guests.filter(guest => id !== guest.id)\n    });\n\n  toggleEditing = id => \n    this.toggleGuestProperty(\"isEditing\", id);\n\n   setName = (name, id) =>\n    this.setState({\n      guests: this.state.guests.map(guest => {\n        if (id === guest.id) {\n          return {\n            ...guest,\n            name\n          };\n        }\n        return guest;\n      })\n    });\n\n    toggleFilter = () => \n      this.setState({ isFiltered: !this.state.isFiltered });\n\n    handleNameInput = e =>\n      this.setState({ pendingGuest: e.target.value });\n\n    newGuestSubmitHandler = e => {\n      e.preventDefault();\n      const id = this.newGuestId();\n      this.setState({\n        guests: [\n          {\n            name: this.state.pendingGuest,\n            isConfirmed: false,\n            isEditing: false,\n            id\n          },\n          ...this.state.guests\n        ],\n        pendingGuest: ''\n      });\n    }\n\n  getTotalInvited = () => \n    this.state.guests.length;\n\n  getAttendingGeuests = () =>\n    this.state.guests.reduce(\n    (total, guest) => guest.isConfirmed ? total + 1 : total,\n    0\n  );\n\n  render() {\n    const totalInvited = this.getTotalInvited();\n    const numberAttending = this.getAttendingGeuests();\n    const numberUnconfirmed = totalInvited - numberAttending;\n\n    return (\n      <div className=\"App\">\n        <Header\n          newGuestSubmitHandler={this.newGuestSubmitHandler}\n          pendingGuest={this.state.pendingGuest}\n          handleNameInput={this.handleNameInput}\n        />\n\n        <MainContent\n          toggleFilter={this.toggleFilter}\n          isFiltered={this.state.isFiltered}\n          totalInvited={totalInvited}\n          numberAttending={numberAttending}\n          numberUnconfirmed={numberUnconfirmed}\n          guests={this.state.guests}\n          toggleConfirmation={this.toggleConfirmation}\n          toggleEditing={this.toggleEditing}\n          setName={this.setName}\n          removeGuest={this.removeGuest}\n          pendingGuest={this.state.pendingGuest}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}